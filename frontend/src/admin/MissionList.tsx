import React, { useState, useEffect } from 'react';

interface Mission {
  id: number;
  name: string;
  description: string;
  difficulty: string;
  requiredPlayers: number;
  threat: string;
  objectives: string[];
  dangerFactors: string[];
  estimatedDuration: number;
  isCustom: boolean;
}

interface MissionListProps {
  onEdit: (mission: Mission) => void;
}

export function MissionList({ onEdit }: MissionListProps) {
  const [missions, setMissions] = useState<Mission[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');

  useEffect(() => {
    loadMissions();
  }, []);

  const loadMissions = async () => {
    try {
      const password = localStorage.getItem('adminPassword');
      const response = await fetch('/api/admin/missions', {
        headers: { 'x-admin-password': password || '' }
      });
      
      if (response.ok) {
        const data = await response.json();
        setMissions(data);
      } else {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏—Å—Å–∏–π');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏—Å—Å–∏–π:', error);
    } finally {
      setLoading(false);
    }
  };

  const deleteMission = async (id: number) => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –º–∏—Å—Å–∏—é?')) return;
    
    try {
      const password = localStorage.getItem('adminPassword');
      const response = await fetch(`/api/admin/missions/${id}`, {
        method: 'DELETE',
        headers: { 'x-admin-password': password || '' }
      });
      
      if (response.ok) {
        loadMissions();
      } else {
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∏—Å—Å–∏–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∏—Å—Å–∏–∏:', error);
      alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∏—Å—Å–∏–∏');
    }
  };

  const filteredMissions = missions.filter(m => 
    m.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    m.description.toLowerCase().includes(searchQuery.toLowerCase())
  );

  if (loading) {
    return (
      <div className="loading-container">
        <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –º–∏—Å—Å–∏–π...</div>
      </div>
    );
  }

  return (
    <div className="mission-list">
      <div className="list-header">
        <h2>üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏—Å—Å–∏—è–º–∏</h2>
        <button 
          className="btn btn-primary"
          onClick={() => onEdit({ 
            id: 0, 
            name: '', 
            description: '', 
            difficulty: '–õ–µ–≥–∫–∞—è', 
            requiredPlayers: 3, 
            threat: '',
            objectives: [],
            dangerFactors: [],
            estimatedDuration: 30,
            isCustom: false
          })}
        >
          ‚ûï –°–æ–∑–¥–∞—Ç—å –º–∏—Å—Å–∏—é
        </button>
      </div>

      <div className="search-bar">
        <input
          type="text"
          placeholder="üîç –ü–æ–∏—Å–∫ –º–∏—Å—Å–∏–π..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="search-input"
        />
      </div>

      <div className="missions-grid">
        {filteredMissions.map(mission => (
          <div key={mission.id} className="mission-card">
            <div className="mission-card-header">
              <h3>{mission.name}</h3>
              <div className="mission-badges">
                <span className={`difficulty-badge ${mission.difficulty.toLowerCase()}`}>
                  {mission.difficulty}
                </span>
                {mission.isCustom && (
                  <span className="custom-badge">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è</span>
                )}
              </div>
            </div>
            
            <p className="mission-description">{mission.description}</p>
            
            <div className="mission-meta">
              <span>üë• –ò–≥—Ä–æ–∫–æ–≤: {mission.requiredPlayers}</span>
              <span>‚è±Ô∏è {mission.estimatedDuration} –º–∏–Ω</span>
              <span>‚ö†Ô∏è {mission.threat}</span>
            </div>
            
            <div className="mission-objectives">
              <strong>–¶–µ–ª–∏:</strong>
              <ul>
                {mission.objectives.slice(0, 2).map((obj, i) => (
                  <li key={i}>{obj}</li>
                ))}
                {mission.objectives.length > 2 && (
                  <li>... –∏ –µ—â–µ {mission.objectives.length - 2}</li>
                )}
              </ul>
            </div>
            
            <div className="mission-actions">
              <button 
                className="btn btn-edit"
                onClick={() => onEdit(mission)}
              >
                ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
              <button 
                className="btn btn-delete"
                onClick={() => deleteMission(mission.id)}
              >
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>
          </div>
        ))}
      </div>
      
      {filteredMissions.length === 0 && !loading && (
        <div className="empty-state">
          <p>–ú–∏—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
        </div>
      )}
    </div>
  );
}
