import React, { useState } from 'react';

interface Mission {
  id: number;
  name: string;
  description: string;
  difficulty: string;
  requiredPlayers: number;
  threat: string;
  objectives: string[];
  dangerFactors: string[];
  estimatedDuration: number;
  isCustom: boolean;
}

interface MissionEditorProps {
  mission: Mission;
  onSave: () => void;
  onCancel: () => void;
}

export function MissionEditor({ mission, onSave, onCancel }: MissionEditorProps) {
  const [formData, setFormData] = useState(mission);
  const [saving, setSaving] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setSaving(true);
    
    try {
      const password = localStorage.getItem('adminPassword');
      const url = formData.id 
        ? `/api/admin/missions/${formData.id}`
        : '/api/admin/missions';
      
      const method = formData.id ? 'PUT' : 'POST';
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
          'x-admin-password': password || ''
        },
        body: JSON.stringify(formData)
      });
      
      if (response.ok) {
        onSave();
      } else {
        alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∏—Å—Å–∏–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∏—Å—Å–∏–∏:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∏—Å—Å–∏–∏');
    } finally {
      setSaving(false);
    }
  };

  const updateFormData = (field: string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  return (
    <div className="mission-editor">
      <div className="editor-header">
        <h2>{formData.id ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏—Å—Å–∏–∏' : '‚ûï –ù–æ–≤–∞—è –º–∏—Å—Å–∏—è'}</h2>
        <button className="btn btn-secondary" onClick={onCancel}>
          ‚ùå –û—Ç–º–µ–Ω–∞
        </button>
      </div>

      <form onSubmit={handleSubmit} className="editor-form">
        <div className="form-section">
          <h3>üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
          
          <div className="form-group">
            <label>–ù–∞–∑–≤–∞–Ω–∏–µ –º–∏—Å—Å–∏–∏ *</label>
            <input
              type="text"
              required
              value={formData.name}
              onChange={(e) => updateFormData('name', e.target.value)}
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –º–∏—Å—Å–∏–∏"
            />
          </div>

          <div className="form-group">
            <label>–û–ø–∏—Å–∞–Ω–∏–µ *</label>
            <textarea
              required
              rows={4}
              value={formData.description}
              onChange={(e) => updateFormData('description', e.target.value)}
              placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∏—Å—Å–∏–∏"
            />
          </div>

          <div className="form-row">
            <div className="form-group">
              <label>–°–ª–æ–∂–Ω–æ—Å—Ç—å *</label>
              <select
                value={formData.difficulty}
                onChange={(e) => updateFormData('difficulty', e.target.value)}
              >
                <option value="–õ–µ–≥–∫–∞—è">–õ–µ–≥–∫–∞—è</option>
                <option value="–°—Ä–µ–¥–Ω—è—è">–°—Ä–µ–¥–Ω—è—è</option>
                <option value="–°–ª–æ–∂–Ω–∞—è">–°–ª–æ–∂–Ω–∞—è</option>
                <option value="–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è">–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è</option>
              </select>
            </div>

            <div className="form-group">
              <label>–ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ *</label>
              <input
                type="number"
                min="1"
                max="10"
                required
                value={formData.requiredPlayers}
                onChange={(e) => updateFormData('requiredPlayers', parseInt(e.target.value))}
              />
            </div>

            <div className="form-group">
              <label>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç—ã)</label>
              <input
                type="number"
                min="5"
                max="120"
                value={formData.estimatedDuration}
                onChange={(e) => updateFormData('estimatedDuration', parseInt(e.target.value))}
                placeholder="30"
              />
            </div>
          </div>
        </div>

        <div className="form-section">
          <h3>‚ö†Ô∏è –£–≥—Ä–æ–∑—ã –∏ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h3>
          
          <div className="form-group">
            <label>–û–ø–∏—Å–∞–Ω–∏–µ —É–≥—Ä–æ–∑—ã *</label>
            <textarea
              required
              rows={3}
              value={formData.threat}
              onChange={(e) => updateFormData('threat', e.target.value)}
              placeholder="–û—Å–Ω–æ–≤–Ω–∞—è —É–≥—Ä–æ–∑–∞ –º–∏—Å—Å–∏–∏"
            />
          </div>

          <div className="form-group">
            <label>–§–∞–∫—Ç–æ—Ä—ã –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)</label>
            <textarea
              rows={5}
              value={formData.dangerFactors?.join('\n') || ''}
              onChange={(e) => updateFormData('dangerFactors', e.target.value.split('\n').filter(l => l.trim()))}
              placeholder="–§–∞–∫—Ç–æ—Ä 1&#10;–§–∞–∫—Ç–æ—Ä 2&#10;–§–∞–∫—Ç–æ—Ä 3"
            />
          </div>
        </div>

        <div className="form-section">
          <h3>üéØ –¶–µ–ª–∏ –º–∏—Å—Å–∏–∏</h3>
          
          <div className="form-group">
            <label>–°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)</label>
            <textarea
              rows={5}
              value={formData.objectives?.join('\n') || ''}
              onChange={(e) => updateFormData('objectives', e.target.value.split('\n').filter(l => l.trim()))}
              placeholder="–¶–µ–ª—å 1&#10;–¶–µ–ª—å 2&#10;–¶–µ–ª—å 3"
            />
          </div>
        </div>

        <div className="form-actions">
          <button 
            type="submit" 
            className="btn btn-primary btn-large"
            disabled={saving}
          >
            {saving ? 'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∏—Å—Å–∏—é'}
          </button>
          <button 
            type="button"
            className="btn btn-secondary"
            onClick={onCancel}
          >
            ‚ùå –û—Ç–º–µ–Ω–∞
          </button>
        </div>
      </form>
    </div>
  );
}
