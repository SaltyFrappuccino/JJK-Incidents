import React, { useState, useEffect, useCallback, useRef } from 'react';
import ReactMarkdown from 'react-markdown';
import { useGame } from '../../contexts/GameContext';
import { MissionBriefing } from './MissionBriefing';
import { RevealPhase } from './RevealPhase';
import { DiscussionPhase } from './DiscussionPhase';
import { VotingPhase } from './VotingPhase';
import { RoundEnd } from './RoundEnd';
import { PlayerList } from './PlayerList';
import { MissionContext } from './MissionContext';
import { TeamTable } from './TeamTable';
import { CharacterSheet } from './CharacterSheet';
import { AbilitiesPanel } from './AbilitiesPanel';
import { AbilityNotification } from './AbilityNotification';

type GameLoopPhase = 'mission_briefing' | 'reveal' | 'discussion' | 'voting' | 'round_end' | 'mission_complete';

interface GameLoopProps {
  onGameComplete: () => void;
}

export function GameLoop({ onGameComplete }: GameLoopProps) {
  const { gameState, myPlayer, myCharacter, nextRound, fetchMyCharacter, fetchMyAbilities, advancePhase, revealCharacteristic, generateAIEpilogue } = useGame();
  const [isGenerating, setIsGenerating] = useState(false);
  const [eliminatedPlayerId, setEliminatedPlayerId] = useState<string | null>(null);
  const [isAdvancingRound, setIsAdvancingRound] = useState(false);
  const generationAttemptedRef = useRef(false);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º gameState.phase –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ local state
  const currentPhase = gameState?.phase as GameLoopPhase || 'mission_briefing';
  
  console.log('[GameLoop] –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞:', currentPhase);
  console.log('[GameLoop] gameState:', gameState);

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∏–≥—Ä—É
  useEffect(() => {
    if (gameState?.gameStarted && !myCharacter) {
      console.log('[GameLoop] –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∏–≥—Ä—É');
      fetchMyCharacter();
      fetchMyAbilities();
    }
  }, [gameState?.gameStarted, myCharacter, fetchMyCharacter, fetchMyAbilities]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI —ç–ø–∏–ª–æ–≥–∞
  const handleGenerateAIEpilogue = useCallback(async () => {
    setIsGenerating(true);
    try {
      console.log('[GameLoop] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI —ç–ø–∏–ª–æ–≥...');
      const result = await generateAIEpilogue();
      if (result.success && result.epilogue) {
        console.log('[GameLoop] AI —ç–ø–∏–ª–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
        // –≠–ø–∏–ª–æ–≥ —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ gameState —á–µ—Ä–µ–∑ generateAIEpilogue
      } else {
        console.error('[GameLoop] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI —ç–ø–∏–ª–æ–≥–∞:', result.error);
        alert(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–ø–∏–ª–æ–≥–∞: ${result.error}`);
      }
    } catch (error) {
      console.error('[GameLoop] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI —ç–ø–∏–ª–æ–≥–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–ø–∏–ª–æ–≥–∞');
    } finally {
      setIsGenerating(false);
    }
  }, [generateAIEpilogue]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  const handleReveal = async (categoryIndex: number) => {
    try {
      console.log('[GameLoop] –†–∞—Å–∫—Ä—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É:', categoryIndex);
      const result = await revealCharacteristic(categoryIndex);
      if (result.success) {
        console.log('[GameLoop] –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç–∞');
      } else {
        console.error('[GameLoop] –û—à–∏–±–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:', result.error);
      }
    } catch (error) {
      console.error('[GameLoop] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:', error);
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–ø–∏–ª–æ–≥ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ mission_complete
  useEffect(() => {
    console.log('[GameLoop] useEffect –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–ø–∏–ª–æ–≥–∞:', {
      phase: gameState?.phase,
      isHost: myPlayer?.role === 'host',
      hasEpilogue: !!gameState?.aiGeneratedEpilogue,
      isGenerating,
      generationAttempted: generationAttemptedRef.current
    });
    
    if (
      gameState?.phase === 'mission_complete' && 
      myPlayer?.role === 'host' && 
      !gameState?.aiGeneratedEpilogue && 
      !isGenerating &&
      !generationAttemptedRef.current
    ) {
      console.log('[GameLoop] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–ø–∏–ª–æ–≥ –¥–ª—è –ì–ú');
      generationAttemptedRef.current = true;
      handleGenerateAIEpilogue();
    }
  }, [gameState?.phase, myPlayer?.role, gameState?.aiGeneratedEpilogue, isGenerating]);

  // –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ñ–∞–∑—ã mission_complete
  useEffect(() => {
    if (gameState?.phase !== 'mission_complete') {
      generationAttemptedRef.current = false;
    }
  }, [gameState?.phase]);

  const handleSaveEpilogue = (epilogue: string) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ø–∏–ª–æ–≥ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
    console.log('[GameLoop] –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ø–∏–ª–æ–≥:', epilogue);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —ç–ø–∏–ª–æ–≥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    onGameComplete();
  };


  const handleBriefingComplete = async () => {
    console.log('[GameLoop] –ë—Ä–∏—Ñ–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∞–∑–µ reveal');
    try {
      const result = await advancePhase();
      if (result.success) {
        console.log('[GameLoop] –§–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ reveal');
      } else {
        console.error('[GameLoop] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Ñ–∞–∑—ã:', result.error);
      }
    } catch (error) {
      console.error('[GameLoop] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±—Ä–∏—Ñ–∏–Ω–≥–∞:', error);
    }
  };

  const handleRevealComplete = () => {
    // –§–∞–∑—ã —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è backend –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    console.log('[GameLoop] –†–∞—Å–∫—Ä—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∂–¥–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∞ —Ñ–∞–∑—ã –æ—Ç backend');
  };

  const handleDiscussionComplete = () => {
    // –§–∞–∑—ã —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è backend –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    console.log('[GameLoop] –û–±—Å—É–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∂–¥–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∞ —Ñ–∞–∑—ã –æ—Ç backend');
  };

  const handleVotingComplete = async () => {
    if (!myPlayer || myPlayer.role !== 'host') return;

    setIsAdvancingRound(true);
    try {
      const result = await nextRound();
      if (result.success) {
        if (result.gameEnded) {
          // –§–∞–∑–∞ mission_complete –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ backend
        } else {
          setEliminatedPlayerId(result.eliminatedPlayerId || null);
          // –§–∞–∑–∞ round_end –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ backend
        }
      }
    } catch (error) {
      console.error('Error advancing round:', error);
    } finally {
      setIsAdvancingRound(false);
    }
  };

  const handleRoundEndComplete = () => {
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–ø–∏–ª–æ–≥—É –∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è RoundEnd
    console.log('[GameLoop] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–ø–∏–ª–æ–≥—É');
  };

  const handleMissionComplete = () => {
    onGameComplete();
  };

  const renderCurrentPhase = () => {
    console.log('[GameLoop] renderCurrentPhase –≤—ã–∑–≤–∞–Ω–∞ —Å —Ñ–∞–∑–æ–π:', currentPhase);
    console.log('[GameLoop] gameState –≤ renderCurrentPhase:', gameState);
    
    if (!gameState) {
      console.log('[GameLoop] gameState –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ renderCurrentPhase');
      return (
        <div className="loading-screen">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...</p>
        </div>
      );
    }
    
    switch (currentPhase) {
      case 'mission_briefing':
        return <MissionBriefing onBriefingComplete={handleBriefingComplete} />;
      
      case 'reveal':
        return <RevealPhase onPhaseComplete={handleRevealComplete} />;
      
      case 'discussion':
        return <DiscussionPhase onPhaseComplete={handleDiscussionComplete} />;
      
      case 'voting':
        return <VotingPhase onPhaseComplete={handleVotingComplete} />;
      
      case 'round_end':
        return (
          <RoundEnd 
            onPhaseComplete={handleRoundEndComplete} 
          />
        );
      
      case 'mission_complete':
        console.log('[GameLoop] –†–µ–Ω–¥–µ—Ä–∏–º mission_complete —Ñ–∞–∑—É');
        console.log('[GameLoop] myPlayer:', myPlayer);
        console.log('[GameLoop] myPlayer.role:', myPlayer?.role);
        console.log('[GameLoop] isHost:', myPlayer?.role === 'host');
        console.log('[GameLoop] gameState:', gameState);
        console.log('[GameLoop] aiGeneratedEpilogue:', gameState?.aiGeneratedEpilogue);
        console.log('[GameLoop] isGenerating:', isGenerating);
        
        return (
          <div className="mission-complete">
            <h2>–ú–∏—Å—Å–∏—è –ó–∞–≤–µ—Ä—à–µ–Ω–∞</h2>
            
            {!gameState?.aiGeneratedEpilogue ? (
              myPlayer?.role === 'host' ? (
                <div className="epilogue-generating">
                  <div className="spinner"></div>
                  <p>ü§ñ AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–ø–∏–ª–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã...</p>
                  <button 
                    className="btn btn-secondary"
                    onClick={handleGenerateAIEpilogue}
                    disabled={isGenerating}
                  >
                    {isGenerating ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é'}
                  </button>
                </div>
              ) : (
                <div className="waiting-for-epilogue">
                  <div className="spinner"></div>
                  <span>–û–∂–∏–¥–∞–Ω–∏–µ —ç–ø–∏–ª–æ–≥–∞ –æ—Ç –ú–∞—Å—Ç–µ—Ä–∞ –ò–≥—Ä—ã...</span>
                </div>
              )
            ) : (
              <div className="generated-epilogue-preview">
                <h3>–≠–ø–∏–ª–æ–≥ –º–∏—Å—Å–∏–∏:</h3>
                <div className="epilogue-text">
                  <ReactMarkdown>{gameState.aiGeneratedEpilogue}</ReactMarkdown>
                </div>
                {myPlayer?.role === 'host' && (
                  <div className="epilogue-actions">
                    <button 
                      className="btn btn-primary btn-large"
                      onClick={() => handleSaveEpilogue(gameState.aiGeneratedEpilogue)}
                    >
                      ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∏—Å—Å–∏—é
                    </button>
                    <button 
                      className="btn btn-secondary"
                      onClick={handleGenerateAIEpilogue}
                      disabled={isGenerating}
                    >
                      üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ
                    </button>
                  </div>
                )}
              </div>
            )}
          </div>
        );
      
      default:
        return (
          <div className="unknown-phase">
            <h2>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –§–∞–∑–∞</h2>
            <p>–¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞: {currentPhase}</p>
          </div>
        );
    }
  };

  const getPhaseTitle = () => {
    const titles: Record<GameLoopPhase, string> = {
      'mission_briefing': '–ë—Ä–∏—Ñ–∏–Ω–≥ –ú–∏—Å—Å–∏–∏',
      'reveal': '–§–∞–∑–∞ –†–∞—Å–∫—Ä—ã—Ç–∏—è',
      'discussion': '–§–∞–∑–∞ –û–±—Å—É–∂–¥–µ–Ω–∏—è',
      'voting': '–§–∞–∑–∞ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è',
      'round_end': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –†–∞—É–Ω–¥–∞',
      'mission_complete': '–ú–∏—Å—Å–∏—è –ó–∞–≤–µ—Ä—à–µ–Ω–∞'
    };
    return titles[currentPhase] || '–ò–≥—Ä–æ–≤–∞—è –§–∞–∑–∞';
  };

  const getPhaseDescription = () => {
    const descriptions: Record<GameLoopPhase, string> = {
      'mission_briefing': '–ò–∑—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –º–∏—Å—Å–∏–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –≤—ã–∑–æ–≤—É',
      'reveal': '–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É —Ä–∞—Å–∫—Ä—ã—Ç—å –∫–æ–º–∞–Ω–¥–µ',
      'discussion': '–û–±—Å—É–¥–∏—Ç–µ –∏ –æ—Ü–µ–Ω–∏—Ç–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã',
      'voting': '–ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—á–∏—Ç–∞–µ—Ç–µ –Ω–∞–∏–º–µ–Ω–µ–µ —Ü–µ–Ω–Ω—ã–º',
      'round_end': '–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã',
      'mission_complete': '–ú–∏—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'
    };
    return descriptions[currentPhase] || '';
  };

  return (
    <div className="game-loop">
      <div className="game-header">
        <div className="game-info">
          <h1>{getPhaseTitle()}</h1>
          <p className="phase-description">{getPhaseDescription()}</p>
        </div>
        
        <div className="game-status">
          <div className="room-info">
            <span className="room-code">–ö–æ–º–Ω–∞—Ç–∞: {gameState?.roomCode}</span>
            <span className="round-number">–†–∞—É–Ω–¥ {gameState?.round}</span>
          </div>
          
          <div className="team-status">
            <span>–ö–æ–º–∞–Ω–¥–∞: {gameState?.players.length || 0}</span>
            <span>–¢—Ä–µ–±—É–µ—Ç—Å—è: {gameState?.strikeTeamSize || 0}</span>
          </div>
        </div>
      </div>

      {/* –í–≤–µ—Ä—Ö—É - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ */}
      {myCharacter && (
        <div className="my-character-section">
          <CharacterSheet 
            character={myCharacter}
            isOwner={true}
            onCharacteristicSelect={handleReveal}
            canSelect={currentPhase === 'reveal' && !myPlayer?.hasRevealed}
          />
        </div>
      )}

      {/* –ü–æ —Ü–µ–Ω—Ç—Ä—É - —Ç–µ–∫—É—â–∞—è —Ñ–∞–∑–∞ */}
      <div className="main-phase-content">
        {renderCurrentPhase()}
      </div>

      {/* –ü–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π */}
      <AbilitiesPanel />

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è—Ö */}
      <AbilityNotification />

      {/* –í–Ω–∏–∑—É - —Ç–∞–±–ª–∏—Ü–∞ –∫–æ–º–∞–Ω–¥—ã */}
      <TeamTable />
    </div>
  );
}

